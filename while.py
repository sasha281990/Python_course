# Выведите все точные квадраты натуральных чисел, не превосходящие входного натурального числа N.
# Входные данные
# На вход поступает натуральное число N
# Выходные данные
# Необходимо вывести  все точные квадраты натуральных чисел, не превосходящие данного числа N.

a = int(input())
start = 1
while start ** 2 <= a:
    print(start ** 2)
    start += 1

# Напишите программу, которая распечатает все натуральные числа от 1000 до 2000 включительно.
# Каждое число следует выводить на отдельной строчке как в примере ниже
# 1000
# 1001
# 1002
# ...
# 1998
# 1999
# 2000

a = 1000
while a <= 2000:
    print(a)
    a += 1

# Напишите программу, которая распечатает все натуральные числа кратные
# 5 от 195 до 6785 включительно в порядке убывания.
# Каждое число следует выводить на отдельной строчке как в примере ниже
# 6785
# 6780
# 6775
# ...
# 205
# 200
# 195

a = 6785
while a >= 195:
    print(a)
    a -= 5

# Мишка Лимак хочет стать самым большим медведем, ну, или хотя бы стать больше своего старшего брата Боба.
# Сейчас вес Лимака равен a, а вес Боба равен b. Гарантируется, что вес Лимака меньше или равен весу Боба.
# Лимак ест много, и его вес утраивается каждый год, а вес Боба удваивается каждый год.
# Через сколько целых лет Лимак станет строго больше (т. е. будет весить строго больше) Боба?

a, b = map(int, input().split())
count = 0
while a <= b:
    a *= 3
    b *= 2
    count += 1
print(count)

# Японцы считают цифру «4» очень несчастливой, они даже исключают ее из нумерации этажей
# Давайте и мы, от греха подальше, избавимся от этой цифры в списке numbers.
# Ваша задача удалить все упоминания цифры «4» в списке numbers и затем вывести список при помощи команды
# print(*numbers)

numbers = [2, 3, 7, 9, 5, 0, 6, 3, 6, 0, 1, 7, 9, 4, 4, 4, 2, 2, 6, 9, 1, 7, 0, 3, 8, 1, 0, 3, 8, 0, 8,
           4, 0, 2, 3, 6, 6, 1, 5, 8, 7, 2, 3, 8, 7, 7, 1, 2, 2, 8, 4, 3, 4, 8, 0, 7, 9, 8, 3, 7, 7, 7,
           7, 5, 1, 7, 4, 5, 0, 8, 0, 9, 2, 4, 7, 6, 6, 5, 9, 7, 1, 7, 8, 8, 3, 4, 9, 7, 6, 4, 2, 0, 0,
           0, 9, 4, 0, 9, 4, 4, 4, 5, 5, 4, 2, 5, 9, 4, 8, 1, 5, 7, 1, 0, 2, 6, 8, 7, 2, 7, 9, 3, 6, 4,
           7, 5, 0, 7, 2, 0, 8, 2, 9, 8, 6, 4, 4, 7, 5, 5, 9, 4, 9, 5, 6, 9, 1, 1, 3, 1, 5, 2, 1, 7, 0,
           0, 7, 8, 1, 3, 0, 0, 4, 4, 3, 3, 6, 7, 8, 6, 1, 2, 0, 2, 0, 9, 9, 0, 5, 2, 4, 1, 7, 4, 9, 9,
           4, 9, 6, 9, 2, 7, 1, 2, 4, 5, 4, 0, 9, 0]
while 4 in numbers:
    numbers.remove(4)
print(*numbers)

# На вход программе поступает слово. Вам необходимо воспроизвести процесс, в котором каждый раз у этого
# слово будет пропадать первая и последняя буква. Этот процесс необходимо закончить, когда в слове останется
# только одна буква или слово  станет пустой строкой. При этом результат каждого этапа нужно выводить

s =str(input())
while len(s) > 0:
    print(s)
    s = s[1:-1]

# В первый день спортсмен пробежал X километров. В каждый последующий день он увеличивал пробег на 15%
# от предыдущего дня. Вам необходимо определить номер дня, в который пробег спортсмена составил не менее Y километров.
# Само число Y будет поступать на вход программе.

x, y = map(int, input().split())
i = 1
while x <= y:
    x *= 1.15
    i += 1
print(i)

# У Васи есть n пар носков. Утром каждого дня, собираясь в школу, Вася должен надеть пару носков.
# Вечером, прийдя со школы, Вася снимает надетые носки и выбрасывает их. Каждый m-й день
# (в дни с номерами m,2m,3m, ...) мама покупает Васе одну пару носков. Она делает это
# поздно вечером, поэтому Вася может надеть новые носки не раньше следующего дня.
# На сколько подряд идущих дней Васе хватит носков?

n, m = map(int, input().split())
days = 0
while n > 0:
    days += 1
    n -=1
    if days % m == 0:
        n += 1
print(days)

# Программист Василий любит романтику — поэтому на этот Новый Год он решил освещать свою комнату свечами.
# У Василия есть a свечей. Когда Василий зажигает новую свечу, сначала она горит ровно один час,
# а затем тухнет. Василий — сообразительный малый, поэтому из b потухших свечей он умеет получать
# одну новую свечу. В последствии эту новую свечу (так же как и другие новые свечи) можно зажечь.
# Теперь Василию интересно, на сколько часов освещения хватит его свечек, если он будет действовать
# оптимальным образом. Помогите ему найти это число.

a, b = map(int, input().split())
time = a
while a >= b:
    c = a // b
    a = c + a % b
    time += c
print(time)

# В архитектуре компьютера важную роль играют числа, являющиеся степенями двойки: 1, 2, 4, 8 и так далее.
# Напишите программу, которая проверяет, является ли введённое натуральное число степенью двойки.
# Если да, то выводится сама эта степень; если нет, выводится «НЕТ»

n = int(input())
i = 0
while 2 ** i < n:
    i += 1
if 2 ** i == n:
    print(i)
else:
    print('НЕТ')

# Возьмём число. Умножим его на его же первую цифру. Результат умножим на первую цифру результата.
# И так далее. Например, начнём с 8: Очевидно, когда первая цифра очередного числа в такой
# последовательности становится равной 1, числа перестают изменяться. Но это происходит не при всех начальных числах.
# Напишем программу, которая будет хотя бы приблизительно определять судьбу введённого числа n.
# Начиная с числа n, умножайте имеющееся число на его первую цифру, пока у получившегося числа первая цифра не станет
# равной 1, либо пока оно не превысит миллиарда. В качестве ответа выведите результат

a = int(input())
while (int(str(a)[0])) != 1 and a <= 1000000000:
    a = int(str(a)[0]) * a
print(a)
