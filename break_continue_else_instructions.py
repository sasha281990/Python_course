# Программа получает на вход натуральное число n > 1. Выведите минимальный делитель этого числа, отличный от единицы.
# К примеру для числа 12 делителями являются 1, 2, 3, 4, 6, 12.
n = int(input())
i = 2
while n % i != 0:
    i += 1
print(i)

# Давайте переберем все числа от а до b включительно и будем их выводить на экран,
# при этом нужно выполнить следующие условия:
# пропускать (не выводить) числа, которые делятся на 2 или на 3
# если встречаете число, кратное 777, необходимо принудительно закончить цикл, само это число не выводить
# Постарайтесь не использовать цикл for
# Формат ввода
# Вводится два натуральных числа a и b в отдельных строках. Гарантируется, что a<b.
# Формат вывода
# Вывести все числа на интервале от a до b включительно согласно условиям в пунктах 1 и 2
a = int(input())
b = int(input())
while a <= b:
    if a % 777 == 0:
        break
    if a % 2 != 0 and a % 3 != 0:
        print(a)
    a += 1

# Гипотеза Коллатца
# Сиракузская последовательность, или последовательность Коллатца, строится так: возьмём натуральное число n;
# если оно чётное, то заменим его числом n/2; если же оно нечётное, то заменим его числом 3n+1.
# Получившееся число — следующее в сиракузской последовательности после числа n. Затем заменяем получившееся
# число по тому же правилу, и так далее.
# Определите, сколько шагов потребуется сиракузской последовательности, стартующей с заданного числа, чтобы прийти к 1.
# Обычно, если проделать такую замену достаточно много раз, мы приходим к числу 1 (за которым следует снова 1).
# Например: 8 → 4 → 2 → 1 или 10 → 5 → 16 → 8 → 4 → 2 → 1.
# Определите, сколько шагов потребуется сиракузской последовательности, стартующей с заданного числа, чтобы прийти к 1.
# Если вы обнаружите число, сиракузская последовательность от которого не приходит к 1, то... вы,
# скорее всего, ошиблись. Но если нет, то поздравляем: вы прославитесь, ведь вопрос о том, всегда ли сиракузская
# последовательность приходит к 1 (независимо от начального числа), давно будоражит умы математиков.
n = int(input())
cnt = 0
while n != 1:
    if n % 2 == 0:
        n = n // 2
        cnt += 1
    else:
        n = (3 * n) + 1
        cnt += 1
print(cnt)

# Вам на вход поступает слово и ваша задача в цикле while обойти все его буквы и распечатать их в формате фразы:
# «Текущая буква: <letter>».
# Как только вы встретите строчные английские буквы «e» или «a» нужно вывести фразу «Ага! Нашлась», перестать
# печатать буквы и принудительно выйти из цикла.
# В случае, если в слове не оказалось букв «e» или «a» необходимо вывести фразу «Распечатали все буквы»
word = input()
index = 0
while index < len(word):
    letter = word[index]

    if letter == 'e' or letter == 'a':
        print("Ага! Нашлась")
        break

    print("Текущая буква:", letter)
    index += 1
else:
    print("Распечатали все буквы")
