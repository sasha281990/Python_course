# Перед вами список numbers, состоящий из 100 целых чисел
# Ваша задачи пройтись в цикле по элементам списка и вывести на экран каждый элемент на отдельной строке
numbers = [99, 50, -16, 9, 47, -62, 5, -64, -68, 85,
           11, -20, 16, 96, -43, 46, -25, 33, 81, -30,
           64, 66, -11, 60, 3, -5, -1,-80, 49, -12, -86,
           -40, -98, -92, -91, -71, 56, -76, -30, -82,
           17, -2, -64, 47, 22, -28, 40, 55, 54, -3, -58,
           -10,-35, -15, -2, -60, 70, 50, -77, 83, -49,
           42, 27, -58, -79, -2, -100, -42, -18, 38, 95,
           9, 98, -89, -46, 96, 64, -35, 41, 94, 1, -90,
           29, 23, 39, -3, 11, -65, -64, 52, -69, 32,
           -14, -49, -28, -11, 85, -75, -6, 15]
for i in numbers:
    print(i)

# Перед вами список words, состоящий из 100 строк
# Ваша задачи пройтись в цикле по элементам списка и вывести на экран только те элементы, длина которых больше 6.
# Выводить каждый элемент нужно на отдельной строке в том же порядке, в котором слова расположены в списке words
words = ['require', 'build', 'head', 'land', 'dark', 'seat', 'have', 'five', 'particularly', 'focus', 'moment',
         'visit', 'past', 'turn', 'bad', 'modern', 'once', 'future', 'pay', 'assume', 'himself', 'physical', 'chance',
         'remember', 'better', 'former', 'believe', 'explain', 'reduce', 'whatever', 'theory', 'during', 'enough',
         'wall', 'commercial', 'challenge', 'tell', 'actually', 'include', 'somebody', 'decade', 'by', 'better',
         'would', 'five', 'cost', 'kitchen', 'our', 'affect', 'board', 'practice', 'full', 'instead', 'apply', 'good',
         'past', 'clearly', 'special', 'both', 'analysis', 'peace', 'truth', 'cultural', 'light', 'answer', 'build',
         'each', 'watch', 'buy', 'theory', 'pretty', 'expect', 'account', 'music', 'sell', 'newspaper', 'reach',
         'fish', 'tax', 'employee', 'start', 'most', 'during', 'citizen', 'develop', 'carry', 'only', 'certainly',
         'rock', 'economy', 'risk', 'later', 'one', 'body', 'star', 'they', 'choice', 'appear', 'return', 'sometimes']
for i in words:
    if len(i) > 6:
        print(i)

# Перед вами список numbers, состоящий из 100 целых чисел
# Ваша задача пройтись в цикле по элементам списка и увеличить каждый в 2 раза.
# В итоге изначальный список numbers  должен измениться
# В качестве ответа распечатайте измененный список numbers
numbers = [-35, 68, -91, 23, -92, -82, -74, 32, 39, -30,
           -100, -29, 54, 26, 54, -45, 20, 53, -17, 68,
           -35, 11, 26, -17, 70, 89, -81, -4, 61, -45,
           13, 63, -48, -66, -92, -15, -88, -87, -75, 44,
           -49, -81, 19, -33, -59, 85, -69, -60, 9, -98,
           28, 11, 15, -35, -80, 5, -20, -52, -45, 26, 47,
           -16, 40, -14, -12, 15, 73, -16, 29, -98, 93,
           -77, 1, 85, 77, 73, 100, -71, 99, 39, 2, -38,
           49, -31, 15, 43, 94, -39, -89, -46, -71, 39,
           -56, 41, -93, 4, -79, 48, 88, -51]
for i in range(len(numbers)):
    numbers[i] = numbers[i] * 2
print(numbers)

# Ваша задача создать список из n строк. Программа сперва будет принимать натуральное число n, а затем n строк в каждой
# отдельной строке. В качестве ответа выведите получившийся список.
n = int(input())
a = []
for i in range(n):
    a.append(input())
print(a)

# Входные данные
# На первой строке вводится один символ — строчная буква.
# На второй строке вводится предложение.
# Выходные данные
# Нужно вывести список слов (словом считается часть предложения, окружённая символами пустого пространства), в которых
# присутствует введённая буква в любом регистре, в том же порядке, в каком они встречаются в предложении.
char = input().lower()
sentence = input()
words_with_char = []
for word in sentence.split():
    if char in word.lower():
        words_with_char.append(word)
for word in words_with_char:
    print(word)

# Линейный поиск
# Линейный поиск, также известный как последовательный поиск, этот метод используется для поиска элемента в списке.
# Линейный поиск является одним из базовых алгоритмов, с которым вы должны познакомиться, изучая программирования.
# Суть алгоритма в следующем: вы должны проверять каждый элемент списка последовательно один за другим, пока не
# найдете интересующий вас элемент или пока не закончится весь список.
elements = list(map(int,input().split()))
search_value = int(input())
index = 1
for element in elements:
    if element == search_value:
        print(index)
        break
    index += 1
else:
    print("ErrorValue")

# На вход программе поступает список из целых чисел. Ваша задача найти в данном списке наименьшее положительное
# значение. В случае, если положительных значений нет, выведите строку "Empty"
numbers = map(int, input().split())
cand = None
for item in numbers:
    if item > 0:
        if cand is None:
            cand = item
        else:
            if item < cand:
                cand = item
    else:
        continue
if cand is not None:
    print(cand)
else:
    print('Empty')

# Напишите программу, которая находит рекордное количество вхождений (не обязательно подряд) символа в строку.
input_string = input()
input_string = input_string.lower()
char_freq = {}

for char in input_string:
    if char in char_freq:
        char_freq[char] += 1
    else:
        char_freq[char] = 1

max_freq = max(char_freq.values())
print(max_freq)

# Для делимости числа на 11 необходимо, чтобы разность между суммой цифр, стоящих на четных местах, и суммой цифр,
# стоящих на нечетных местах, делилась на 11.
# Требуется написать программу, которая проверит делимость заданного числа на 11.
num = input()
even_sum = 0
odd_sum = 0

for i in range(len(num)):
    if i % 2 == 0:
        even_sum += int(num[i])
    else:
        odd_sum += int(num[i])

if abs(even_sum - odd_sum) % 11 == 0:
    print("YES")
else:
    print("NO")

# На вход программе подается строка, состоящая из различных символов: буквы, цифры, знаки препинания и т.д.
# Ваша задача определить сколько символов в данной строке являются цифрами и также найти сумму всех этих цифр. Например,
# в строке "Комната 1408" содержится 4 цифры и их сумма равна 13.
# В качестве ответа необходимо через пробел вывести 2 числа - количество цифр в введенной строке и их сумму
input_string = input()

digit_count = 0
digit_sum = 0

for char in input_string:
    if char.isdigit():
        digit_count += 1
        digit_sum += int(char)
print(digit_count, digit_sum)

# Правильная скобочная последовательность
# Одна из стандартных задач на программирование. Подумайте над способом ее решения, если не приходит ничего в голову,
# загляните в подсказку) Итак, у нас есть последовательность скобочных символов, состоящая только из символов ( и )
# Ваша задача определить является ли введенная скобочная последовательность правильной.
# Правильная скобочная последовательность (ПСП) называется строка, состоящая только символов "скобок", где каждой
# закрывающей скобке найдётся соответствующая открывающая. При этом учитывайте, что:
# Пустая последовательность является правильной.
# Если A – правильная скобочная последовательность, то (A) – правильные скобочные последовательности.
# Если A и B – правильные скобочные последовательности, то AB – правильная скобочная последовательность.
# Если введенная строка является ПСП, выведите YES, в противном случае - NO.

sequence = input()
brackets_counter = 0

for bracket in sequence:
    if bracket == '(':
        brackets_counter += 1
    elif bracket == ')':
        brackets_counter -= 1
    if brackets_counter < 0:
        print("NO")
        break
if brackets_counter == 0:
    print("YES")
elif brackets_counter > 0:
    print("NO")

# Правильная скобочная последовательность 2
# Наша программа принимает на вход последовательность скобочных символов. Ваша задача определить является ли введенная
# скобочная последовательность правильной.
# Правильная скобочная последовательность (ПСП) называется строка, состоящая только из символов "скобки", где каждой
# закрывающей скобке найдётся соответствующая открывающая (причём того же типа). При этом учитывайте, что:
# Пустая последовательность является правильной.
# Если A – правильная скобочная последовательность, то (A), [A] и {A} – правильные скобочные последовательности.
# Если A и B – правильные скобочные последовательности, то AB – правильная скобочная последовательность.
# Если введенная строка является ПСП, выведите YES, в противном случае - NO.
string = input()
stack = []

brackets = {"(": ")", "[": "]", "{": "}"}

for bracket in string:
    if bracket in brackets:
        stack.append(bracket)
    elif len(stack) == 0 or brackets[stack.pop()] != bracket:
        print('NO')
        break
else:
    print('YES' if len(stack) == 0 else 'NO')
